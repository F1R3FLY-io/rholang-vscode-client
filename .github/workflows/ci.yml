name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint
      run: npm run lint
      continue-on-error: true

    - name: Build
      run: npm run build

    - name: Run tests (Linux)
      if: runner.os == 'Linux'
      run: xvfb-run -a npm test

    - name: Run tests (macOS/Windows)
      if: runner.os != 'Linux'
      run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build extension
      run: npm run build

    - name: Package extension
      run: npx vsce package

    - name: Upload VSIX
      uses: actions/upload-artifact@v3
      with:
        name: rholang-vscode-extension
        path: '*.vsix'
        if-no-files-found: error

  publish:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build extension
      run: npm run build

    - name: Check if version changed
      id: version_check
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

        # Check if tag exists
        if git rev-parse "v$PACKAGE_VERSION" >/dev/null 2>&1; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      if: steps.version_check.outputs.changed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${{ steps.version_check.outputs.version }}
        gh release create "v$VERSION" \
          --title "v$VERSION" \
          --notes "See CHANGELOG.md for details" \
          --draft
